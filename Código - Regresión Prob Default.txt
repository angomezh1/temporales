import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.ticker as ticker
import matplotlib.font_manager as font_manager
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.metrics import median_absolute_error
from matplotlib.gridspec import  GridSpec


df = pd.read_csv('D:/andrgome/Documents/BDPython/BD_ProbdefaultColombia2.csv',encoding='latin-1')

#df = df.iloc[686:]


X = df[['CTACTE','DEUDAEXT','DEUDAPIB','BALFISCAL','INTPIB','IMPTOSPIB','RINPIB','PFIPIB','GSFC','EMBI']]
y = df['PD']



X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=3)

# linearM  = LinearRegression(normalize=True)
# linearM.fit(X_train,y_train)
# print('wi OLS =',linearM.coef_)
# print('w0 OLS =',linearM.intercept_)
# print('R2 OLS =',linearM.score(X_test,y_test))


ridge  = Ridge(alpha=1,normalize=True)
ridge.fit(X_train,y_train)
print('wi Ridge =',ridge.coef_)
print('w0 Ridge =',ridge.intercept_)
print('R2 Ridge =',ridge.score(X_test,y_test))


# lasso  = Lasso(alpha=10,normalize=True)
# lasso.fit(X_train,y_train)
# print('wi Lasso =',lasso.coef_)
# print('w0 Lasso =',lasso.intercept_)
# print('R2 Lasso =',lasso.score(X_test,y_test))

y_pred = ridge.predict(X)

print('MAE =',median_absolute_error(y, y_pred))
MAE = median_absolute_error(y, y_pred)

banda_superior = y_pred + 2*MAE
banda_inferior = y_pred - 2*MAE

#Gr√°fico
font = font_manager.FontProperties(family='arial',weight='bold', style='normal', size=30)
tick_spacing1 = 100
tick_spacing2 = 5

fig = plt.figure()

ax1 = fig.add_subplot(1, 2, 1)
#ax1.plot(df['Fecha'],y_pred,marker='o', linestyle='solid',linewidth=5,color='goldenrod',alpha=0.99,label='Modelo',markersize=1)
ax1.plot(df['Fecha'],df['PD'],marker='o',linestyle='solid',linewidth=5,color='darkblue',alpha=0.99,label='Prob Default',markersize=1)
#ax1.fill_between(df['Fecha'],banda_inferior,banda_superior,color='lightgrey', alpha= 0.7)
ax1.legend(frameon=False,prop=font,loc=1, bbox_to_anchor=(0.5, 1),ncol=10,markerscale=10)
ax1.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing2))
plt.xticks(rotation=90)
plt.yticks(fontname = "Arial",fontsize=25)
plt.xticks(fontname = "Arial",fontsize=25)
ax1.title.set_fontfamily('arial')
ax1.axis([None, None, None, None])
vals = ax1.get_yticks()
ax1.set_yticklabels(['{:,.2%}'.format(x) for x in vals])
plt.box(on=None)

ax2 = ax1.twinx()
ax2.plot(df['Fecha'],X.values.dot(ridge.coef_),marker='o',linestyle='solid',linewidth=5,color='goldenrod',alpha=0.99,label='Z-Score Macro',markersize=1)
ax2.legend(frameon=False,prop=font,loc=1, bbox_to_anchor=(1, 1),ncol=10,markerscale=3)
ax2.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing2))
plt.yticks(fontname = "Arial",fontsize=25)
plt.xticks(fontname = "Arial",fontsize=25)
#ax2.axis(['2018-12-31', '2020-03-20', None, None])
vals = ax2.get_yticks()
ax2.set_yticklabels(['{:,.2}'.format(x) for x in vals])


# ax3 = fig.add_subplot(1, 2, 2)
# ax3.plot(df['Fecha'],y_pred,marker='o', linestyle='solid',color='goldenrod',alpha=0.99,label='Modelo',markersize=10)
# ax3.plot(df['Fecha'],df['PD'],marker='o',linestyle='solid',color='darkblue',alpha=0.99,label='Prob Default',markersize=10)
# ax3.fill_between(df['Fecha'],banda_inferior,banda_superior,color='lightgrey', alpha= 0.7)
# ax3.xaxis.set_major_locator(ticker.MultipleLocator(tick_spacing2 ))
# plt.xticks(rotation=90)
# plt.yticks(fontname = "Arial",fontsize=25)
# plt.xticks(fontname = "Arial",fontsize=25)
# ax3.title.set_fontfamily('arial')
# ax3.axis([None, None, None, None])
# vals = ax3.get_yticks()
# ax3.set_yticklabels(['{:,.2%}'.format(x) for x in vals])


plt.subplots_adjust(bottom=0.1, right=3.8, top=1.9)
plt.box(on=None)
#plt.rc('legend', fontsize=40)
plt.show()

